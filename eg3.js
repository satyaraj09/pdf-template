import { jsPDF } from "jspdf";
import { ChartJSNodeCanvas } from "chartjs-node-canvas";
import fs from "fs";

const width = 600;
const height = 300;
const chartCanvas = new ChartJSNodeCanvas({ width, height });

const generateChart = async (labels, data, label, color) => {
  return await chartCanvas.renderToDataURL({
    type: "line",
    data: {
      labels,
      datasets: [
        {
          label,
          data,
          borderColor: color,
          fill: false,
          tension: 0.3,
        },
      ],
    },
    options: {
      scales: {
        x: { title: { display: true, text: "Timestamp" } },
        y: { title: { display: true, text: label } },
      },
    },
  });
};

const addFooter = (doc, pageWidth, pageHeight, timestamp) => {
  const marginX = 15;
  const footerY = pageHeight - 20;

  doc.setFontSize(9).setFont("helvetica", "normal");
  doc.text(`Report Generated by: vega@gmail.com @ ${timestamp} (GMT-00:00)`, marginX, footerY);
  doc.text("This is a computer-generated report, no signature is required ***", marginX, footerY + 7);
};

const generateReport = async () => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const marginX = 15;
  const marginY = 15;
  const MAX_ROWS = 25;

  // Dummy Data
  const data = Array.from({ length: 60 }, (_, i) => {
    const timestamp = new Date(Date.now() + i * 60000).toISOString().replace("T", " ").substring(0, 19);
    return {
      timestamp,
      temperature: (20 + Math.random() * 10).toFixed(2),
      humidity: (40 + Math.random() * 20).toFixed(2),
    };
  });

  const labels = data.map(d => d.timestamp);
  const tempData = data.map(d => d.temperature);
  const humData = data.map(d => d.humidity);

  const tempChart = await generateChart(labels, tempData, "Temperature (°C)", "red");
  const humChart = await generateChart(labels, humData, "Humidity (%)", "blue");

  let y = marginY;
  doc.setFont("helvetica", "bold").setFontSize(14).setTextColor(60, 130, 225);
  doc.text("Data Report", marginX, y);
  y += 10;
  doc.setFontSize(10).setTextColor(0, 0, 0);
  doc.text("Temperature Chart", marginX, y);
  y += 5;
  doc.addImage(tempChart, "PNG", marginX, y, pageWidth - marginX * 2, 60);
  y += 65;
  doc.text("Humidity Chart", marginX, y);
  y += 5;
  doc.addImage(humChart, "PNG", marginX, y, pageWidth - marginX * 2, 60);

  addFooter(doc, pageWidth, pageHeight, data[0].timestamp);

  // New Page for Table
  let rowStart = 0;
  const TABLE_Y_START = marginY + 20;
  const ROW_HEIGHT = 8;
  const COL_WIDTHS = [30, 70, 40, 40];
  const TABLE_WIDTH = COL_WIDTHS.reduce((a, b) => a + b, 0);
  const TABLE_X_START = (pageWidth - TABLE_WIDTH) / 2;

  while (rowStart < data.length) {
    doc.addPage();
    doc.setFontSize(12).setTextColor(60, 130, 225).setFont("helvetica", "bold");
    doc.text("Data Report", marginX, marginY);
    doc.setFontSize(10).setTextColor(0, 0, 0);

    // Header Row
    const headers = ["Sr. No.", "Timestamp", "Temperature (°C)", "Humidity (%)"];
    let x = TABLE_X_START;
    let y = TABLE_Y_START;

    headers.forEach((header, i) => {
      doc.text(header, x + 2, y + 6);
      doc.rect(x, y, COL_WIDTHS[i], ROW_HEIGHT);
      x += COL_WIDTHS[i];
    });

    y += ROW_HEIGHT;

    // Table Rows
    for (let i = rowStart; i < Math.min(rowStart + MAX_ROWS, data.length); i++) {
      const row = data[i];
      const rowValues = [
        `${i + 1}`,
        row.timestamp,
        row.temperature,
        row.humidity,
      ];

      x = TABLE_X_START;
      rowValues.forEach((text, j) => {
        doc.text(text.toString(), x + 2, y + 6);
        doc.rect(x, y, COL_WIDTHS[j], ROW_HEIGHT);
        x += COL_WIDTHS[j];
      });

      y += ROW_HEIGHT;
    }

    addFooter(doc, pageWidth, pageHeight, data[0].timestamp);

    rowStart += MAX_ROWS;
  }

  const output = "report.pdf";
  fs.writeFileSync(output, Buffer.from(doc.output("arraybuffer")));
  console.log(`Saved to ${output}`);
};

generateReport();