import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { ChartJSNodeCanvas } from "chartjs-node-canvas";

const width = 600;
const height = 300;
const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height });


async function generateDualAxisChart(labels, tempData, humidData) {
  const chartCanvas = new ChartJSNodeCanvas({ width: 800, height: 400 });

  const config = {
    type: 'line',
    data: {
      labels,
      datasets: [
        {
          label: 'Temperature (°C)',
          data: tempData,
          borderColor: 'red',
          yAxisID: 'yTemp',
          tension: 0.3,
        },
        {
          label: 'Humidity (%)',
          data: humidData,
          borderColor: 'blue',
          yAxisID: 'yHumid',
          tension: 0.3,
        },
      ],
    },
    options: {
      responsive: false,
      scales: {
        yTemp: {
          type: 'linear',
          position: 'left',
          ticks: {
            color: 'red',
          },
          title: {
            display: true,
            text: 'Temperature (°C)',
            color: 'red',
          },
        },
        yHumid: {
          type: 'linear',
          position: 'right',
          grid: {
            drawOnChartArea: false,
          },
          ticks: {
            color: 'blue',
          },
          title: {
            display: true,
            text: 'Humidity (%)',
            color: 'blue',
          },
        },
      },
      plugins: {
        legend: {
          labels: {
            font: {
              size: 10,
            },
          },
        },
      },
    },
  };

  return await chartCanvas.renderToDataURL(config);
}


const generateChart = async (labels, data, label, color) => {
  const config = {
    type: "line",
    data: {
      labels,
      datasets: [{
        label,
        data,
        borderColor: color,
        borderWidth: 2,
        fill: false,
      }]
    },
  }
  return await chartJSNodeCanvas.renderToDataURL(config);
};

// ===== Sample Data (from DB or API) =====
const leftData = {
  "Make:": "Vega",
  "Model:": "Alpha",
  "Serial No:": "ALP-BA0680",
  "Instrument ID:": "BA0680"
};

const rightData = {
  "Temperature Resolution:": " 0.1 °C",
  "Temperature Accuracy:": "± 0.1 °C",
  "Humidity Resolution:": "0.1 %",
  "Humidity Accuracy:": " ± 0.1 %"
};

const dynamic = {
  reportname: "Test",
  email: "vega@gmail.com"
}

const generatePDF = async () => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const marginRightX = pageWidth / 2;
  const marginX = 15;
  const marginY = pageHeight - 15;
  let currentLine = 10;

  const footerText = (pageNum, totalPages) => {
    const timestamp = new Date().toLocaleString();
    doc.setLineWidth(0.5);
    doc.line(marginX, marginY - 5, pageWidth - 10, marginY - 5);
    doc.setFontSize(8);
    const prefixText = "Report Generated by: ";
    const emailX = marginX + doc.getTextWidth(prefixText);
    doc.text(`${prefixText}`, marginX, marginY);
    doc.setTextColor(0, 0, 255); // blue color
    doc.textWithLink(dynamic.email, emailX, marginY, {
      url: `mailto:${dynamic.email}`,
    });
    const afterEmail = ` @ ${timestamp} (GMT-00:00)`;
    const afterEmailX = emailX + doc.getTextWidth(dynamic.email);
    doc.setTextColor(0, 0, 0); // reset to black
    doc.text(afterEmail, afterEmailX, marginY);
    doc.text(
      "This is a computer-generated report, no signature is required ***",
      marginX,
      marginY + 5
    );
    const rightX = pageWidth - marginX;
    doc.text(`Page ${pageNum} of ${totalPages}`, rightX, marginY, {
      align: "right",
    });
    doc.text("Copyright © Vega™", rightX, marginY + 5, { align: "right" });
  };
  const dummyData = Array.from({ length: 100 }, (_, i) => {
    const date = new Date();
    date.setMinutes(date.getMinutes() + i * 10);
    return {
      sr: i + 1,
      timestamp: date.toISOString().slice(0, 19).replace("T", " "),
      temperature: (20 + Math.random() * 10).toFixed(2),
      humidity: (40 + Math.random() * 20).toFixed(2),
      probes: (40 + Math.random() * 20).toFixed(2),
    };
  });

  const labels = dummyData.map((d) => d.timestamp);
  const tempData = dummyData.map((d) => d.temperature);
  const humidData = dummyData.map((d) => d.humidity);
  const probesData = dummyData.map((d) => d.probes);

  const tempHumidChart = await generateDualAxisChart(
    labels,
    tempData,
    humidData
  );

  const probesChart = await generateChart(
    labels,
    probesData,
    "Probes",
    "green"
  );

  // ===== Title =====
  doc.setFontSize(14).setFont(undefined, "bold").setTextColor(60, 130, 225);
  doc.text("Data Report", pageWidth / 2, currentLine, { align: "center" });
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(10);
  doc.text(`${dynamic.reportname}`, pageWidth / 2, currentLine + 5, { align: "center" });

  // ===== Horizontal Line 1 =====
  doc.setLineWidth(0.5);
  doc.line(marginX, currentLine += 7, pageWidth - 15, currentLine);

  // ===== Section 1 Heading =====
  doc.setFont(undefined, "bold").setFontSize(14).setTextColor(60, 130, 225);
  doc.text("Device Info", marginX, currentLine += 7);
  doc.setTextColor(0, 0, 0);

  // ===== Left Column 1 - Labels Bold, Values Normal =====
  doc.setFontSize(10);
  currentLine += 5;

  // Make:
  doc.setFont(undefined, "bold");
  doc.text("Make:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Make:"], marginX + doc.getTextWidth("Make:") + 2, currentLine);

  // Model:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("Model:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Model:"], marginX + doc.getTextWidth("Model:") + 2, currentLine);

  // Serial No:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("Serial No:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Serial No:"], marginX + doc.getTextWidth("Serial No:") + 2, currentLine);

  // Instrument ID:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("Instrument ID:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Instrument ID:"], marginX + doc.getTextWidth("Instrument ID:") + 2, currentLine);

  // ===== Right Column 1 - Same Y Positions =====
  let yStart = currentLine - (3 * 5); // Go back 3 lines for right column start

  // Temperature Resolution:
  doc.setFont(undefined, "bold");
  doc.text("Temperature Resolution:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Temperature Resolution:"], marginRightX + doc.getTextWidth("Temperature Resolution:") + 2, yStart);

  // Temperature Accuracy:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Temperature Accuracy:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Temperature Accuracy:"], marginRightX + doc.getTextWidth("Temperature Accuracy:") + 2, yStart);

  // Humidity Resolution:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Humidity Resolution:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Humidity Resolution:"], marginRightX + doc.getTextWidth("Humidity Resolution:") + 2, yStart);

  // Humidity Accuracy:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Humidity Accuracy:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Humidity Accuracy:"], marginRightX + doc.getTextWidth("Humidity Accuracy:") + 2, yStart);

  // ===== Horizontal Line 2 =====
  doc.setLineWidth(0.5);
  doc.line(15, currentLine += 5, pageWidth - 15, currentLine);

  // ===== Section 2 Heading =====
  doc.setFont(undefined, "bold").setFontSize(14).setTextColor(60, 130, 225);
  doc.text("Logger Summary", marginX, currentLine += 7);
  doc.setTextColor(0, 0, 0);

  // ===== Left Column 2 - Labels Bold, Values Normal =====
  doc.setFontSize(10);
  currentLine += 5;

  // Start Date & Time:
  doc.setFont(undefined, "bold");
  doc.text("Start Date & Time:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Make:"], marginX + doc.getTextWidth("Start Date & Time:") + 2, currentLine);

  // End Date & Time:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("End Date & Time:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Model:"], marginX + doc.getTextWidth("End Date & Time:") + 2, currentLine);

  // Recording Interval:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("Recording Interval:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Serial No:"], marginX + doc.getTextWidth("Recording Interval:") + 2, currentLine);

  // ===== Right Column 2 - Same Y Positions =====
  yStart = currentLine - (2 * 5); // Go back 3 lines for right column start

  // Sending Interval:
  doc.setFont(undefined, "bold");
  doc.text("Sending Interval:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Temperature Resolution:"], marginRightX + doc.getTextWidth("Sending Interval:") + 2, yStart);

  // Min Set Temperature:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Min Set Temperature:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Temperature Accuracy:"], marginRightX + doc.getTextWidth("Min Set Temperature:") + 2, yStart);

  // Min Set Humidity:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Min Set Humidity:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Humidity Resolution:"], marginRightX + doc.getTextWidth("Min Set Humidity:") + 2, yStart);

  // ===== Horizontal Line 3 =====
  doc.setLineWidth(0.5);
  doc.line(15, currentLine += 5, pageWidth - 15, currentLine);

  // ===== Section 3 Heading =====
  doc.setFont(undefined, "bold").setFontSize(14).setTextColor(60, 130, 225);
  doc.text("Observed Report Summary", marginX, currentLine += 7);
  doc.setTextColor(0, 0, 0);

  // ===== Left Column 3 - Labels Bold, Values Normal =====
  doc.setFontSize(10);
  currentLine += 5;

  // Min Temperature:
  doc.setFont(undefined, "bold");
  doc.text("Min Temperature:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Make:"], marginX + doc.getTextWidth("Min Temperature:") + 2, currentLine);

  // Max Temperature:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("Max Temperature:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Model:"], marginX + doc.getTextWidth("Max Temperature:") + 2, currentLine);

  // MKT:
  currentLine += 5;
  doc.setFont(undefined, "bold");
  doc.text("MKT:", marginX, currentLine);
  doc.setFont(undefined, "bold");
  doc.text(leftData["Serial No:"], marginX + doc.getTextWidth("MKT:") + 2, currentLine);

  // ===== Right Column 3 - Same Y Positions =====
  yStart = currentLine - (2 * 5); // Go back 3 lines for right column start

  // Min Humidity:
  doc.setFont(undefined, "bold");
  doc.text("Min Humidity:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Temperature Resolution:"], marginRightX + doc.getTextWidth("Min Humidity:") + 2, yStart);

  // Max Humidity:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Max Humidity:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Temperature Accuracy:"], marginRightX + doc.getTextWidth("Max Humidity:") + 2, yStart);

  // Avg Temperature:
  yStart += 5;
  doc.setFont(undefined, "bold");
  doc.text("Avg Temperature:", marginRightX, yStart);
  doc.setFont(undefined, "bold");
  doc.text(rightData["Humidity Resolution:"], marginRightX + doc.getTextWidth("Avg Temperature:") + 2, yStart);

  // ===== Horizontal Line 4 =====
  doc.setLineWidth(0.5);
  doc.line(15, currentLine += 5, pageWidth - 15, currentLine);

  // ===== Section 4 Heading =====
  doc.setFont(undefined, "bold").setFontSize(14).setTextColor(60, 130, 225);
  doc.text("Trend", marginX, currentLine += 7);
  doc.setTextColor(0, 0, 0);

  doc.setFont(undefined, "bold").setFontSize(16);
  doc.text("Temperature-Humidity", marginX, currentLine += 7);
  doc.addImage(tempHumidChart, "PNG", 15, currentLine + 5, pageWidth - 30, 60);

  doc.setFont(undefined, "bold").setFontSize(16);
  doc.text("Probes", marginX, currentLine += 77);
  doc.addImage(probesChart, "PNG", 15, currentLine + 5, pageWidth - 30, 60);

  footerText(1, Math.ceil(dummyData.length / 20) + 1);

  // ====== Table Page ======

  let currentPage = 2;
  let chunked = dummyData.reduce((acc, val, i) => {
    const idx = Math.floor(i / 40);
    if (!acc[idx]) acc[idx] = [];
    acc[idx].push(val);
    return acc;
  }, []);

  chunked.forEach((data, index) => {
    doc.addPage();
    // ===== Title =====
    doc.setFontSize(14).setFont(undefined, "bold").setTextColor(60, 130, 225);
    doc.text("Data Report", pageWidth / 2, 15, { align: "center" });
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(10);
    doc.text(`${dynamic.reportname}`, pageWidth / 2, 20, { align: "center" });

    doc.setLineWidth(0.5);
    doc.line(marginX, 25, pageWidth - 15, 25);

    autoTable(doc, {
      startY: 35,
      headStyles: {
        halign: "center",
        valign: "middle",
        lineColor: [0, 0, 0],
        fillColor: [60, 130, 225],
        lineWidth: 0.2,
      },
      bodyStyles: {
        halign: "center",
        valign: "middle",
        lineColor: [0, 0, 0],
        lineWidth: 0.2,
        fontSize: 8,
        cellPadding: 1.2,
      },
      head: [["Sr. No.", "Timestamp", "Temperature (°C)", "Humidity (%)","Probs"]],
      body: data.map((row) => [
        row.sr,
        row.timestamp,
        row.temperature,
        row.humidity,
        row.humidity,
      ]),
      theme: "grid",
      margin: { left: marginX, right: marginX },
      didParseCell: function (dataCell) {
        if (dataCell.section === 'body') {
          const colIndex = dataCell.column.index;

          if (colIndex === 2) {
            const temp = parseFloat(dataCell.cell.raw);
            if (temp < 25.0) {
              dataCell.cell.styles.textColor = [255, 165, 0]; // yellow-orange
            } else if (temp >= 30.0) {
              dataCell.cell.styles.textColor = [255, 0, 0]; // red
            }
          }
          if (colIndex === 3) {
            const humidity = parseFloat(dataCell.cell.raw);
            if (humidity > 70.0) {
              dataCell.cell.styles.textColor = [255, 0, 0]; // red
            }
          }
        }
      }
    });

    footerText(currentPage, chunked.length + 1);
    currentPage++;
  });

  doc.save("report1.pdf");

}

generatePDF();
